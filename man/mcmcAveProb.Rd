% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mcmcAveProb.R
\name{mcmcAveProb}
\alias{mcmcAveProb}
\title{Bayesian MCMC Predicted Probablities for the 'Average' Case}
\usage{
mcmcAveProb(model_matrix, mcmc_out, xcol, xrange, link = "logit",
  ci = c(0.05, 0.95))
}
\arguments{
\item{model_matrix}{model matrix, including intercept. Create with model.matrix(formula, data)}

\item{mcmc_out}{posterior distributions of all coefficients}

\item{xcol}{column number of the explanatory variable for which to calculate 
associated Pr(y = 1)}

\item{xrange}{name of the vector with the range of relevant values of the 
explanatory variable for which to calculate associated Pr(y = 1)}

\item{link}{link: link function, character vector set to "logit" (default) or "probit"}

\item{ci}{the bounds of the credible interval. Default is 0.05 and 0.95. 
Enter as a vector, such as c(0.05, 0.95).
#'@return a matrix with 4 columns:
predictor: identical to x_range
median_pp: median predicted probability at given x
lower_pp: lower bound of credible interval of predicted probability at given x
upper_pp: upper bound of credible interval of predicted probability at given x}
}
\description{
This function calculates predicted probabilities for "average" cases after a Bayesian logit 
or probit model. For an explanation of predicted probabilities for "average" cases,
}
\details{
This function calculates predicted probabilities for "average" cases after a Bayesian 
logit or probit model. For an explanation of predicted probabilities for "average" cases,
see e.g. King, Tomz & Wittenberg (2000, <doi: 10.2307/2669316>)
}
\examples{
\donttest{
  ## simulating data
  set.seed(123456)
  b0 <- 0.2 # true value for the intercept
  b1 <- 0.5 # true value for first beta
  b2 <- 0.7 # true value for second beta
  n <- 500 # sample size
  X1 <- runif(n, -1, 1)
  X2 <- runif(n, -1, 1)
  Z <- b0 + b1 * X1 + b2 * X2
  pr <- 1 / (1 + exp(-Z)) # inv logit function
  Y <- rbinom(n, 1, pr) 
  data <- data.frame(cbind(X1, X2, Y))
  
  ## formatting the data for jags
  datjags <- as.list(data)
  datjags$N <- length(datjags$Y)
  
  ## creating jags model
  model <- function()  {
  
  for(i in 1:N){
    Y[i] ~ dbern(p[i])  ## Bernoulli distribution of y_i
    logit(p[i]) <- mu[i]    ## Logit link function
    mu[i] <- b[1] + 
      b[2] * X1[i] + 
      b[3] * X2[i]
  }
  
  for(j in 1:3){
    b[j] ~ dnorm(0, 0.001) ## Use a coefficient vector for simplicity
  }
  
}

params <- c("b")
inits1 <- list("b" = rep(0, 3))
inits2 <- list("b" = rep(0, 3))
inits <- list(inits1, inits2)

## fitting the model with R2jags
set.seed(123)
fit <- R2jags::jags(data = datjags, inits = inits, 
                    parameters.to.save = params, n.chains = 2, n.iter = 2000, 
                    n.burnin = 1000, model.file = model)

### average value approach
xmat <- model.matrix(Y ~ X1 + X2, data = data)
mcmc <- coda::as.mcmc(fit)
mcmc_mat <- as.matrix(mcmc)[, 1:ncol(xmat)]
X1_sim <- seq(from = min(datjags$X1),
              to = max(datjags$X1), 
              length.out = 10)
ave_prob <- mcmcAveProb(model_matrix = xmat,
                        mcmc_out = mcmc_mat,
                        xcol = 2,
                        xrange = X1_sim)
}
}
